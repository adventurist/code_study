// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: distant.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_distant_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_distant_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3008000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3008000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_distant_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_distant_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_distant_2eproto;
namespace distant {
class Operation;
class OperationDefaultTypeInternal;
extern OperationDefaultTypeInternal _Operation_default_instance_;
class SessionEvent;
class SessionEventDefaultTypeInternal;
extern SessionEventDefaultTypeInternal _SessionEvent_default_instance_;
class SessionInfo;
class SessionInfoDefaultTypeInternal;
extern SessionInfoDefaultTypeInternal _SessionInfo_default_instance_;
class SessionMessage;
class SessionMessageDefaultTypeInternal;
extern SessionMessageDefaultTypeInternal _SessionMessage_default_instance_;
class SessionStart;
class SessionStartDefaultTypeInternal;
extern SessionStartDefaultTypeInternal _SessionStart_default_instance_;
class SessionStop;
class SessionStopDefaultTypeInternal;
extern SessionStopDefaultTypeInternal _SessionStop_default_instance_;
class SessionUpdate;
class SessionUpdateDefaultTypeInternal;
extern SessionUpdateDefaultTypeInternal _SessionUpdate_default_instance_;
}  // namespace distant
PROTOBUF_NAMESPACE_OPEN
template<> ::distant::Operation* Arena::CreateMaybeMessage<::distant::Operation>(Arena*);
template<> ::distant::SessionEvent* Arena::CreateMaybeMessage<::distant::SessionEvent>(Arena*);
template<> ::distant::SessionInfo* Arena::CreateMaybeMessage<::distant::SessionInfo>(Arena*);
template<> ::distant::SessionMessage* Arena::CreateMaybeMessage<::distant::SessionMessage>(Arena*);
template<> ::distant::SessionStart* Arena::CreateMaybeMessage<::distant::SessionStart>(Arena*);
template<> ::distant::SessionStop* Arena::CreateMaybeMessage<::distant::SessionStop>(Arena*);
template<> ::distant::SessionUpdate* Arena::CreateMaybeMessage<::distant::SessionUpdate>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace distant {

enum SessionStatus : int {
  UNKNOWN = 0,
  READY = 1,
  ERROR = 2,
  CLOSED = 3,
  SessionStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  SessionStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool SessionStatus_IsValid(int value);
constexpr SessionStatus SessionStatus_MIN = UNKNOWN;
constexpr SessionStatus SessionStatus_MAX = CLOSED;
constexpr int SessionStatus_ARRAYSIZE = SessionStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SessionStatus_descriptor();
template<typename T>
inline const std::string& SessionStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SessionStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SessionStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SessionStatus_descriptor(), enum_t_value);
}
inline bool SessionStatus_Parse(
    const std::string& name, SessionStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SessionStatus>(
    SessionStatus_descriptor(), name, value);
}
// ===================================================================

class SessionStart :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:distant.SessionStart) */ {
 public:
  SessionStart();
  virtual ~SessionStart();

  SessionStart(const SessionStart& from);
  SessionStart(SessionStart&& from) noexcept
    : SessionStart() {
    *this = ::std::move(from);
  }

  inline SessionStart& operator=(const SessionStart& from) {
    CopyFrom(from);
    return *this;
  }
  inline SessionStart& operator=(SessionStart&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SessionStart& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SessionStart* internal_default_instance() {
    return reinterpret_cast<const SessionStart*>(
               &_SessionStart_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(SessionStart* other);
  friend void swap(SessionStart& a, SessionStart& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SessionStart* New() const final {
    return CreateMaybeMessage<SessionStart>(nullptr);
  }

  SessionStart* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SessionStart>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SessionStart& from);
  void MergeFrom(const SessionStart& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SessionStart* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "distant.SessionStart";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_distant_2eproto);
    return ::descriptor_table_distant_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string target_url = 2;
  void clear_target_url();
  static const int kTargetUrlFieldNumber = 2;
  const std::string& target_url() const;
  void set_target_url(const std::string& value);
  void set_target_url(std::string&& value);
  void set_target_url(const char* value);
  void set_target_url(const char* value, size_t size);
  std::string* mutable_target_url();
  std::string* release_target_url();
  void set_allocated_target_url(std::string* target_url);

  // int32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:distant.SessionStart)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr target_url_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_distant_2eproto;
};
// -------------------------------------------------------------------

class SessionStop :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:distant.SessionStop) */ {
 public:
  SessionStop();
  virtual ~SessionStop();

  SessionStop(const SessionStop& from);
  SessionStop(SessionStop&& from) noexcept
    : SessionStop() {
    *this = ::std::move(from);
  }

  inline SessionStop& operator=(const SessionStop& from) {
    CopyFrom(from);
    return *this;
  }
  inline SessionStop& operator=(SessionStop&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SessionStop& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SessionStop* internal_default_instance() {
    return reinterpret_cast<const SessionStop*>(
               &_SessionStop_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(SessionStop* other);
  friend void swap(SessionStop& a, SessionStop& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SessionStop* New() const final {
    return CreateMaybeMessage<SessionStop>(nullptr);
  }

  SessionStop* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SessionStop>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SessionStop& from);
  void MergeFrom(const SessionStop& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SessionStop* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "distant.SessionStop";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_distant_2eproto);
    return ::descriptor_table_distant_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:distant.SessionStop)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_distant_2eproto;
};
// -------------------------------------------------------------------

class SessionUpdate :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:distant.SessionUpdate) */ {
 public:
  SessionUpdate();
  virtual ~SessionUpdate();

  SessionUpdate(const SessionUpdate& from);
  SessionUpdate(SessionUpdate&& from) noexcept
    : SessionUpdate() {
    *this = ::std::move(from);
  }

  inline SessionUpdate& operator=(const SessionUpdate& from) {
    CopyFrom(from);
    return *this;
  }
  inline SessionUpdate& operator=(SessionUpdate&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SessionUpdate& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SessionUpdate* internal_default_instance() {
    return reinterpret_cast<const SessionUpdate*>(
               &_SessionUpdate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(SessionUpdate* other);
  friend void swap(SessionUpdate& a, SessionUpdate& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SessionUpdate* New() const final {
    return CreateMaybeMessage<SessionUpdate>(nullptr);
  }

  SessionUpdate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SessionUpdate>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SessionUpdate& from);
  void MergeFrom(const SessionUpdate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SessionUpdate* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "distant.SessionUpdate";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_distant_2eproto);
    return ::descriptor_table_distant_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string target_url = 2;
  void clear_target_url();
  static const int kTargetUrlFieldNumber = 2;
  const std::string& target_url() const;
  void set_target_url(const std::string& value);
  void set_target_url(std::string&& value);
  void set_target_url(const char* value);
  void set_target_url(const char* value, size_t size);
  std::string* mutable_target_url();
  std::string* release_target_url();
  void set_allocated_target_url(std::string* target_url);

  // int32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:distant.SessionUpdate)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr target_url_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_distant_2eproto;
};
// -------------------------------------------------------------------

class SessionInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:distant.SessionInfo) */ {
 public:
  SessionInfo();
  virtual ~SessionInfo();

  SessionInfo(const SessionInfo& from);
  SessionInfo(SessionInfo&& from) noexcept
    : SessionInfo() {
    *this = ::std::move(from);
  }

  inline SessionInfo& operator=(const SessionInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline SessionInfo& operator=(SessionInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SessionInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SessionInfo* internal_default_instance() {
    return reinterpret_cast<const SessionInfo*>(
               &_SessionInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(SessionInfo* other);
  friend void swap(SessionInfo& a, SessionInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SessionInfo* New() const final {
    return CreateMaybeMessage<SessionInfo>(nullptr);
  }

  SessionInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SessionInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SessionInfo& from);
  void MergeFrom(const SessionInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SessionInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "distant.SessionInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_distant_2eproto);
    return ::descriptor_table_distant_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string target_url = 2;
  void clear_target_url();
  static const int kTargetUrlFieldNumber = 2;
  const std::string& target_url() const;
  void set_target_url(const std::string& value);
  void set_target_url(std::string&& value);
  void set_target_url(const char* value);
  void set_target_url(const char* value, size_t size);
  std::string* mutable_target_url();
  std::string* release_target_url();
  void set_allocated_target_url(std::string* target_url);

  // string error = 4;
  void clear_error();
  static const int kErrorFieldNumber = 4;
  const std::string& error() const;
  void set_error(const std::string& value);
  void set_error(std::string&& value);
  void set_error(const char* value);
  void set_error(const char* value, size_t size);
  std::string* mutable_error();
  std::string* release_error();
  void set_allocated_error(std::string* error);

  // int32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // .distant.SessionStatus status = 3;
  void clear_status();
  static const int kStatusFieldNumber = 3;
  ::distant::SessionStatus status() const;
  void set_status(::distant::SessionStatus value);

  // int32 target_status_code = 5;
  void clear_target_status_code();
  static const int kTargetStatusCodeFieldNumber = 5;
  ::PROTOBUF_NAMESPACE_ID::int32 target_status_code() const;
  void set_target_status_code(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:distant.SessionInfo)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr target_url_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  int status_;
  ::PROTOBUF_NAMESPACE_ID::int32 target_status_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_distant_2eproto;
};
// -------------------------------------------------------------------

class SessionEvent :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:distant.SessionEvent) */ {
 public:
  SessionEvent();
  virtual ~SessionEvent();

  SessionEvent(const SessionEvent& from);
  SessionEvent(SessionEvent&& from) noexcept
    : SessionEvent() {
    *this = ::std::move(from);
  }

  inline SessionEvent& operator=(const SessionEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline SessionEvent& operator=(SessionEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SessionEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SessionEvent* internal_default_instance() {
    return reinterpret_cast<const SessionEvent*>(
               &_SessionEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(SessionEvent* other);
  friend void swap(SessionEvent& a, SessionEvent& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SessionEvent* New() const final {
    return CreateMaybeMessage<SessionEvent>(nullptr);
  }

  SessionEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SessionEvent>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SessionEvent& from);
  void MergeFrom(const SessionEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SessionEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "distant.SessionEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_distant_2eproto);
    return ::descriptor_table_distant_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .distant.SessionInfo prev_state = 2;
  bool has_prev_state() const;
  void clear_prev_state();
  static const int kPrevStateFieldNumber = 2;
  const ::distant::SessionInfo& prev_state() const;
  ::distant::SessionInfo* release_prev_state();
  ::distant::SessionInfo* mutable_prev_state();
  void set_allocated_prev_state(::distant::SessionInfo* prev_state);

  // .distant.SessionInfo current_state = 3;
  bool has_current_state() const;
  void clear_current_state();
  static const int kCurrentStateFieldNumber = 3;
  const ::distant::SessionInfo& current_state() const;
  ::distant::SessionInfo* release_current_state();
  ::distant::SessionInfo* mutable_current_state();
  void set_allocated_current_state(::distant::SessionInfo* current_state);

  // int32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:distant.SessionEvent)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::distant::SessionInfo* prev_state_;
  ::distant::SessionInfo* current_state_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_distant_2eproto;
};
// -------------------------------------------------------------------

class SessionMessage :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:distant.SessionMessage) */ {
 public:
  SessionMessage();
  virtual ~SessionMessage();

  SessionMessage(const SessionMessage& from);
  SessionMessage(SessionMessage&& from) noexcept
    : SessionMessage() {
    *this = ::std::move(from);
  }

  inline SessionMessage& operator=(const SessionMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline SessionMessage& operator=(SessionMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SessionMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SessionMessage* internal_default_instance() {
    return reinterpret_cast<const SessionMessage*>(
               &_SessionMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(SessionMessage* other);
  friend void swap(SessionMessage& a, SessionMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SessionMessage* New() const final {
    return CreateMaybeMessage<SessionMessage>(nullptr);
  }

  SessionMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SessionMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SessionMessage& from);
  void MergeFrom(const SessionMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SessionMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "distant.SessionMessage";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_distant_2eproto);
    return ::descriptor_table_distant_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes payload = 2;
  void clear_payload();
  static const int kPayloadFieldNumber = 2;
  const std::string& payload() const;
  void set_payload(const std::string& value);
  void set_payload(std::string&& value);
  void set_payload(const char* value);
  void set_payload(const void* value, size_t size);
  std::string* mutable_payload();
  std::string* release_payload();
  void set_allocated_payload(std::string* payload);

  // int32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:distant.SessionMessage)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr payload_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_distant_2eproto;
};
// -------------------------------------------------------------------

class Operation :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:distant.Operation) */ {
 public:
  Operation();
  virtual ~Operation();

  Operation(const Operation& from);
  Operation(Operation&& from) noexcept
    : Operation() {
    *this = ::std::move(from);
  }

  inline Operation& operator=(const Operation& from) {
    CopyFrom(from);
    return *this;
  }
  inline Operation& operator=(Operation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Operation& default_instance();

  enum PayloadCase {
    kStart = 1,
    kStop = 2,
    kUpdate = 3,
    kCustomMessage = 4,
    kEvent = 5,
    PAYLOAD_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Operation* internal_default_instance() {
    return reinterpret_cast<const Operation*>(
               &_Operation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(Operation* other);
  friend void swap(Operation& a, Operation& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Operation* New() const final {
    return CreateMaybeMessage<Operation>(nullptr);
  }

  Operation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Operation>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Operation& from);
  void MergeFrom(const Operation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Operation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "distant.Operation";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_distant_2eproto);
    return ::descriptor_table_distant_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .distant.SessionStart start = 1;
  bool has_start() const;
  void clear_start();
  static const int kStartFieldNumber = 1;
  const ::distant::SessionStart& start() const;
  ::distant::SessionStart* release_start();
  ::distant::SessionStart* mutable_start();
  void set_allocated_start(::distant::SessionStart* start);

  // .distant.SessionStop stop = 2;
  bool has_stop() const;
  void clear_stop();
  static const int kStopFieldNumber = 2;
  const ::distant::SessionStop& stop() const;
  ::distant::SessionStop* release_stop();
  ::distant::SessionStop* mutable_stop();
  void set_allocated_stop(::distant::SessionStop* stop);

  // .distant.SessionUpdate update = 3;
  bool has_update() const;
  void clear_update();
  static const int kUpdateFieldNumber = 3;
  const ::distant::SessionUpdate& update() const;
  ::distant::SessionUpdate* release_update();
  ::distant::SessionUpdate* mutable_update();
  void set_allocated_update(::distant::SessionUpdate* update);

  // .distant.SessionMessage custom_message = 4;
  bool has_custom_message() const;
  void clear_custom_message();
  static const int kCustomMessageFieldNumber = 4;
  const ::distant::SessionMessage& custom_message() const;
  ::distant::SessionMessage* release_custom_message();
  ::distant::SessionMessage* mutable_custom_message();
  void set_allocated_custom_message(::distant::SessionMessage* custom_message);

  // .distant.SessionEvent event = 5;
  bool has_event() const;
  void clear_event();
  static const int kEventFieldNumber = 5;
  const ::distant::SessionEvent& event() const;
  ::distant::SessionEvent* release_event();
  ::distant::SessionEvent* mutable_event();
  void set_allocated_event(::distant::SessionEvent* event);

  void clear_payload();
  PayloadCase payload_case() const;
  // @@protoc_insertion_point(class_scope:distant.Operation)
 private:
  class HasBitSetters;
  void set_has_start();
  void set_has_stop();
  void set_has_update();
  void set_has_custom_message();
  void set_has_event();

  inline bool has_payload() const;
  inline void clear_has_payload();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  union PayloadUnion {
    PayloadUnion() {}
    ::distant::SessionStart* start_;
    ::distant::SessionStop* stop_;
    ::distant::SessionUpdate* update_;
    ::distant::SessionMessage* custom_message_;
    ::distant::SessionEvent* event_;
  } payload_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_distant_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SessionStart

// int32 id = 1;
inline void SessionStart::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SessionStart::id() const {
  // @@protoc_insertion_point(field_get:distant.SessionStart.id)
  return id_;
}
inline void SessionStart::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:distant.SessionStart.id)
}

// string target_url = 2;
inline void SessionStart::clear_target_url() {
  target_url_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SessionStart::target_url() const {
  // @@protoc_insertion_point(field_get:distant.SessionStart.target_url)
  return target_url_.GetNoArena();
}
inline void SessionStart::set_target_url(const std::string& value) {
  
  target_url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:distant.SessionStart.target_url)
}
inline void SessionStart::set_target_url(std::string&& value) {
  
  target_url_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:distant.SessionStart.target_url)
}
inline void SessionStart::set_target_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  target_url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:distant.SessionStart.target_url)
}
inline void SessionStart::set_target_url(const char* value, size_t size) {
  
  target_url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:distant.SessionStart.target_url)
}
inline std::string* SessionStart::mutable_target_url() {
  
  // @@protoc_insertion_point(field_mutable:distant.SessionStart.target_url)
  return target_url_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SessionStart::release_target_url() {
  // @@protoc_insertion_point(field_release:distant.SessionStart.target_url)
  
  return target_url_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SessionStart::set_allocated_target_url(std::string* target_url) {
  if (target_url != nullptr) {
    
  } else {
    
  }
  target_url_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), target_url);
  // @@protoc_insertion_point(field_set_allocated:distant.SessionStart.target_url)
}

// -------------------------------------------------------------------

// SessionStop

// int32 id = 1;
inline void SessionStop::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SessionStop::id() const {
  // @@protoc_insertion_point(field_get:distant.SessionStop.id)
  return id_;
}
inline void SessionStop::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:distant.SessionStop.id)
}

// -------------------------------------------------------------------

// SessionUpdate

// int32 id = 1;
inline void SessionUpdate::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SessionUpdate::id() const {
  // @@protoc_insertion_point(field_get:distant.SessionUpdate.id)
  return id_;
}
inline void SessionUpdate::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:distant.SessionUpdate.id)
}

// string target_url = 2;
inline void SessionUpdate::clear_target_url() {
  target_url_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SessionUpdate::target_url() const {
  // @@protoc_insertion_point(field_get:distant.SessionUpdate.target_url)
  return target_url_.GetNoArena();
}
inline void SessionUpdate::set_target_url(const std::string& value) {
  
  target_url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:distant.SessionUpdate.target_url)
}
inline void SessionUpdate::set_target_url(std::string&& value) {
  
  target_url_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:distant.SessionUpdate.target_url)
}
inline void SessionUpdate::set_target_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  target_url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:distant.SessionUpdate.target_url)
}
inline void SessionUpdate::set_target_url(const char* value, size_t size) {
  
  target_url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:distant.SessionUpdate.target_url)
}
inline std::string* SessionUpdate::mutable_target_url() {
  
  // @@protoc_insertion_point(field_mutable:distant.SessionUpdate.target_url)
  return target_url_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SessionUpdate::release_target_url() {
  // @@protoc_insertion_point(field_release:distant.SessionUpdate.target_url)
  
  return target_url_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SessionUpdate::set_allocated_target_url(std::string* target_url) {
  if (target_url != nullptr) {
    
  } else {
    
  }
  target_url_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), target_url);
  // @@protoc_insertion_point(field_set_allocated:distant.SessionUpdate.target_url)
}

// -------------------------------------------------------------------

// SessionInfo

// int32 id = 1;
inline void SessionInfo::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SessionInfo::id() const {
  // @@protoc_insertion_point(field_get:distant.SessionInfo.id)
  return id_;
}
inline void SessionInfo::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:distant.SessionInfo.id)
}

// string target_url = 2;
inline void SessionInfo::clear_target_url() {
  target_url_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SessionInfo::target_url() const {
  // @@protoc_insertion_point(field_get:distant.SessionInfo.target_url)
  return target_url_.GetNoArena();
}
inline void SessionInfo::set_target_url(const std::string& value) {
  
  target_url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:distant.SessionInfo.target_url)
}
inline void SessionInfo::set_target_url(std::string&& value) {
  
  target_url_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:distant.SessionInfo.target_url)
}
inline void SessionInfo::set_target_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  target_url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:distant.SessionInfo.target_url)
}
inline void SessionInfo::set_target_url(const char* value, size_t size) {
  
  target_url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:distant.SessionInfo.target_url)
}
inline std::string* SessionInfo::mutable_target_url() {
  
  // @@protoc_insertion_point(field_mutable:distant.SessionInfo.target_url)
  return target_url_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SessionInfo::release_target_url() {
  // @@protoc_insertion_point(field_release:distant.SessionInfo.target_url)
  
  return target_url_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SessionInfo::set_allocated_target_url(std::string* target_url) {
  if (target_url != nullptr) {
    
  } else {
    
  }
  target_url_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), target_url);
  // @@protoc_insertion_point(field_set_allocated:distant.SessionInfo.target_url)
}

// .distant.SessionStatus status = 3;
inline void SessionInfo::clear_status() {
  status_ = 0;
}
inline ::distant::SessionStatus SessionInfo::status() const {
  // @@protoc_insertion_point(field_get:distant.SessionInfo.status)
  return static_cast< ::distant::SessionStatus >(status_);
}
inline void SessionInfo::set_status(::distant::SessionStatus value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:distant.SessionInfo.status)
}

// string error = 4;
inline void SessionInfo::clear_error() {
  error_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SessionInfo::error() const {
  // @@protoc_insertion_point(field_get:distant.SessionInfo.error)
  return error_.GetNoArena();
}
inline void SessionInfo::set_error(const std::string& value) {
  
  error_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:distant.SessionInfo.error)
}
inline void SessionInfo::set_error(std::string&& value) {
  
  error_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:distant.SessionInfo.error)
}
inline void SessionInfo::set_error(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  error_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:distant.SessionInfo.error)
}
inline void SessionInfo::set_error(const char* value, size_t size) {
  
  error_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:distant.SessionInfo.error)
}
inline std::string* SessionInfo::mutable_error() {
  
  // @@protoc_insertion_point(field_mutable:distant.SessionInfo.error)
  return error_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SessionInfo::release_error() {
  // @@protoc_insertion_point(field_release:distant.SessionInfo.error)
  
  return error_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SessionInfo::set_allocated_error(std::string* error) {
  if (error != nullptr) {
    
  } else {
    
  }
  error_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), error);
  // @@protoc_insertion_point(field_set_allocated:distant.SessionInfo.error)
}

// int32 target_status_code = 5;
inline void SessionInfo::clear_target_status_code() {
  target_status_code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SessionInfo::target_status_code() const {
  // @@protoc_insertion_point(field_get:distant.SessionInfo.target_status_code)
  return target_status_code_;
}
inline void SessionInfo::set_target_status_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  target_status_code_ = value;
  // @@protoc_insertion_point(field_set:distant.SessionInfo.target_status_code)
}

// -------------------------------------------------------------------

// SessionEvent

// int32 id = 1;
inline void SessionEvent::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SessionEvent::id() const {
  // @@protoc_insertion_point(field_get:distant.SessionEvent.id)
  return id_;
}
inline void SessionEvent::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:distant.SessionEvent.id)
}

// .distant.SessionInfo prev_state = 2;
inline bool SessionEvent::has_prev_state() const {
  return this != internal_default_instance() && prev_state_ != nullptr;
}
inline void SessionEvent::clear_prev_state() {
  if (GetArenaNoVirtual() == nullptr && prev_state_ != nullptr) {
    delete prev_state_;
  }
  prev_state_ = nullptr;
}
inline const ::distant::SessionInfo& SessionEvent::prev_state() const {
  const ::distant::SessionInfo* p = prev_state_;
  // @@protoc_insertion_point(field_get:distant.SessionEvent.prev_state)
  return p != nullptr ? *p : *reinterpret_cast<const ::distant::SessionInfo*>(
      &::distant::_SessionInfo_default_instance_);
}
inline ::distant::SessionInfo* SessionEvent::release_prev_state() {
  // @@protoc_insertion_point(field_release:distant.SessionEvent.prev_state)
  
  ::distant::SessionInfo* temp = prev_state_;
  prev_state_ = nullptr;
  return temp;
}
inline ::distant::SessionInfo* SessionEvent::mutable_prev_state() {
  
  if (prev_state_ == nullptr) {
    auto* p = CreateMaybeMessage<::distant::SessionInfo>(GetArenaNoVirtual());
    prev_state_ = p;
  }
  // @@protoc_insertion_point(field_mutable:distant.SessionEvent.prev_state)
  return prev_state_;
}
inline void SessionEvent::set_allocated_prev_state(::distant::SessionInfo* prev_state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete prev_state_;
  }
  if (prev_state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      prev_state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, prev_state, submessage_arena);
    }
    
  } else {
    
  }
  prev_state_ = prev_state;
  // @@protoc_insertion_point(field_set_allocated:distant.SessionEvent.prev_state)
}

// .distant.SessionInfo current_state = 3;
inline bool SessionEvent::has_current_state() const {
  return this != internal_default_instance() && current_state_ != nullptr;
}
inline void SessionEvent::clear_current_state() {
  if (GetArenaNoVirtual() == nullptr && current_state_ != nullptr) {
    delete current_state_;
  }
  current_state_ = nullptr;
}
inline const ::distant::SessionInfo& SessionEvent::current_state() const {
  const ::distant::SessionInfo* p = current_state_;
  // @@protoc_insertion_point(field_get:distant.SessionEvent.current_state)
  return p != nullptr ? *p : *reinterpret_cast<const ::distant::SessionInfo*>(
      &::distant::_SessionInfo_default_instance_);
}
inline ::distant::SessionInfo* SessionEvent::release_current_state() {
  // @@protoc_insertion_point(field_release:distant.SessionEvent.current_state)
  
  ::distant::SessionInfo* temp = current_state_;
  current_state_ = nullptr;
  return temp;
}
inline ::distant::SessionInfo* SessionEvent::mutable_current_state() {
  
  if (current_state_ == nullptr) {
    auto* p = CreateMaybeMessage<::distant::SessionInfo>(GetArenaNoVirtual());
    current_state_ = p;
  }
  // @@protoc_insertion_point(field_mutable:distant.SessionEvent.current_state)
  return current_state_;
}
inline void SessionEvent::set_allocated_current_state(::distant::SessionInfo* current_state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete current_state_;
  }
  if (current_state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      current_state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, current_state, submessage_arena);
    }
    
  } else {
    
  }
  current_state_ = current_state;
  // @@protoc_insertion_point(field_set_allocated:distant.SessionEvent.current_state)
}

// -------------------------------------------------------------------

// SessionMessage

// int32 id = 1;
inline void SessionMessage::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SessionMessage::id() const {
  // @@protoc_insertion_point(field_get:distant.SessionMessage.id)
  return id_;
}
inline void SessionMessage::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:distant.SessionMessage.id)
}

// bytes payload = 2;
inline void SessionMessage::clear_payload() {
  payload_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SessionMessage::payload() const {
  // @@protoc_insertion_point(field_get:distant.SessionMessage.payload)
  return payload_.GetNoArena();
}
inline void SessionMessage::set_payload(const std::string& value) {
  
  payload_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:distant.SessionMessage.payload)
}
inline void SessionMessage::set_payload(std::string&& value) {
  
  payload_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:distant.SessionMessage.payload)
}
inline void SessionMessage::set_payload(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  payload_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:distant.SessionMessage.payload)
}
inline void SessionMessage::set_payload(const void* value, size_t size) {
  
  payload_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:distant.SessionMessage.payload)
}
inline std::string* SessionMessage::mutable_payload() {
  
  // @@protoc_insertion_point(field_mutable:distant.SessionMessage.payload)
  return payload_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SessionMessage::release_payload() {
  // @@protoc_insertion_point(field_release:distant.SessionMessage.payload)
  
  return payload_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SessionMessage::set_allocated_payload(std::string* payload) {
  if (payload != nullptr) {
    
  } else {
    
  }
  payload_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), payload);
  // @@protoc_insertion_point(field_set_allocated:distant.SessionMessage.payload)
}

// -------------------------------------------------------------------

// Operation

// .distant.SessionStart start = 1;
inline bool Operation::has_start() const {
  return payload_case() == kStart;
}
inline void Operation::set_has_start() {
  _oneof_case_[0] = kStart;
}
inline void Operation::clear_start() {
  if (has_start()) {
    delete payload_.start_;
    clear_has_payload();
  }
}
inline ::distant::SessionStart* Operation::release_start() {
  // @@protoc_insertion_point(field_release:distant.Operation.start)
  if (has_start()) {
    clear_has_payload();
      ::distant::SessionStart* temp = payload_.start_;
    payload_.start_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::distant::SessionStart& Operation::start() const {
  // @@protoc_insertion_point(field_get:distant.Operation.start)
  return has_start()
      ? *payload_.start_
      : *reinterpret_cast< ::distant::SessionStart*>(&::distant::_SessionStart_default_instance_);
}
inline ::distant::SessionStart* Operation::mutable_start() {
  if (!has_start()) {
    clear_payload();
    set_has_start();
    payload_.start_ = CreateMaybeMessage< ::distant::SessionStart >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:distant.Operation.start)
  return payload_.start_;
}

// .distant.SessionStop stop = 2;
inline bool Operation::has_stop() const {
  return payload_case() == kStop;
}
inline void Operation::set_has_stop() {
  _oneof_case_[0] = kStop;
}
inline void Operation::clear_stop() {
  if (has_stop()) {
    delete payload_.stop_;
    clear_has_payload();
  }
}
inline ::distant::SessionStop* Operation::release_stop() {
  // @@protoc_insertion_point(field_release:distant.Operation.stop)
  if (has_stop()) {
    clear_has_payload();
      ::distant::SessionStop* temp = payload_.stop_;
    payload_.stop_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::distant::SessionStop& Operation::stop() const {
  // @@protoc_insertion_point(field_get:distant.Operation.stop)
  return has_stop()
      ? *payload_.stop_
      : *reinterpret_cast< ::distant::SessionStop*>(&::distant::_SessionStop_default_instance_);
}
inline ::distant::SessionStop* Operation::mutable_stop() {
  if (!has_stop()) {
    clear_payload();
    set_has_stop();
    payload_.stop_ = CreateMaybeMessage< ::distant::SessionStop >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:distant.Operation.stop)
  return payload_.stop_;
}

// .distant.SessionUpdate update = 3;
inline bool Operation::has_update() const {
  return payload_case() == kUpdate;
}
inline void Operation::set_has_update() {
  _oneof_case_[0] = kUpdate;
}
inline void Operation::clear_update() {
  if (has_update()) {
    delete payload_.update_;
    clear_has_payload();
  }
}
inline ::distant::SessionUpdate* Operation::release_update() {
  // @@protoc_insertion_point(field_release:distant.Operation.update)
  if (has_update()) {
    clear_has_payload();
      ::distant::SessionUpdate* temp = payload_.update_;
    payload_.update_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::distant::SessionUpdate& Operation::update() const {
  // @@protoc_insertion_point(field_get:distant.Operation.update)
  return has_update()
      ? *payload_.update_
      : *reinterpret_cast< ::distant::SessionUpdate*>(&::distant::_SessionUpdate_default_instance_);
}
inline ::distant::SessionUpdate* Operation::mutable_update() {
  if (!has_update()) {
    clear_payload();
    set_has_update();
    payload_.update_ = CreateMaybeMessage< ::distant::SessionUpdate >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:distant.Operation.update)
  return payload_.update_;
}

// .distant.SessionMessage custom_message = 4;
inline bool Operation::has_custom_message() const {
  return payload_case() == kCustomMessage;
}
inline void Operation::set_has_custom_message() {
  _oneof_case_[0] = kCustomMessage;
}
inline void Operation::clear_custom_message() {
  if (has_custom_message()) {
    delete payload_.custom_message_;
    clear_has_payload();
  }
}
inline ::distant::SessionMessage* Operation::release_custom_message() {
  // @@protoc_insertion_point(field_release:distant.Operation.custom_message)
  if (has_custom_message()) {
    clear_has_payload();
      ::distant::SessionMessage* temp = payload_.custom_message_;
    payload_.custom_message_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::distant::SessionMessage& Operation::custom_message() const {
  // @@protoc_insertion_point(field_get:distant.Operation.custom_message)
  return has_custom_message()
      ? *payload_.custom_message_
      : *reinterpret_cast< ::distant::SessionMessage*>(&::distant::_SessionMessage_default_instance_);
}
inline ::distant::SessionMessage* Operation::mutable_custom_message() {
  if (!has_custom_message()) {
    clear_payload();
    set_has_custom_message();
    payload_.custom_message_ = CreateMaybeMessage< ::distant::SessionMessage >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:distant.Operation.custom_message)
  return payload_.custom_message_;
}

// .distant.SessionEvent event = 5;
inline bool Operation::has_event() const {
  return payload_case() == kEvent;
}
inline void Operation::set_has_event() {
  _oneof_case_[0] = kEvent;
}
inline void Operation::clear_event() {
  if (has_event()) {
    delete payload_.event_;
    clear_has_payload();
  }
}
inline ::distant::SessionEvent* Operation::release_event() {
  // @@protoc_insertion_point(field_release:distant.Operation.event)
  if (has_event()) {
    clear_has_payload();
      ::distant::SessionEvent* temp = payload_.event_;
    payload_.event_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::distant::SessionEvent& Operation::event() const {
  // @@protoc_insertion_point(field_get:distant.Operation.event)
  return has_event()
      ? *payload_.event_
      : *reinterpret_cast< ::distant::SessionEvent*>(&::distant::_SessionEvent_default_instance_);
}
inline ::distant::SessionEvent* Operation::mutable_event() {
  if (!has_event()) {
    clear_payload();
    set_has_event();
    payload_.event_ = CreateMaybeMessage< ::distant::SessionEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:distant.Operation.event)
  return payload_.event_;
}

inline bool Operation::has_payload() const {
  return payload_case() != PAYLOAD_NOT_SET;
}
inline void Operation::clear_has_payload() {
  _oneof_case_[0] = PAYLOAD_NOT_SET;
}
inline Operation::PayloadCase Operation::payload_case() const {
  return Operation::PayloadCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace distant

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::distant::SessionStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::distant::SessionStatus>() {
  return ::distant::SessionStatus_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_distant_2eproto
